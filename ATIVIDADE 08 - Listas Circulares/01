/* Resolva o problema utilizando os conceitos trabalhados em aulas, aplicados na linguagem C.
Escreva um programa na linguagem C que implemente uma lista encadeada circular com suas
operações básicas:
1. Mostrar lista
2. Inserir no início
3. Inserir no final
4. Inserir por posição
5. Procurar elemento (tratar se há mais de um elemento com o mesmo valor)
6. Remover por valor
Importante: para cada opção selecionada, verifique a possibilidade de sua execução, informando caso
alguma solicitação não possa ser atendida (ex: tentar excluir um elemento de uma lista vazia). */
#include <stdio.h>
#include <stdlib.h>

void LimparPrompt() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}


typedef struct Node{
    int vlr;
    struct Node *prox;
}node;

void MostrarLista (node *cabeca);
node *InserirInicio (int valor, node *cabeca);
node *InserirFinal (int valor, node *cabeca);
node *InserirPosicao (int posicao, int valor,node *cabeca);
void ProcurarElemento (int valor, node *cabeca);
node *RemoverValor (int valor, node *cabeca);

int main () {
    int opcao;
    int valor, posicao;
    node *cabeca = NULL;
    while (1){
        printf ("escolha uma opção :\n");
        printf ("1. Mostrar lista\n");
        printf ("2. Inserir no início\n");
        printf ("3. Inserir no final\n");
        printf ("4. Inserir por posição\n");
        printf ("5. Procurar elementos\n");
        printf ("6. Remover por valor\n");
        scanf ("%d", &opcao);
        
        switch (opcao){
            case 1:
                LimparPrompt();
                MostrarLista(cabeca);
                break;
            case 2:
                LimparPrompt();
                printf ("Insira o valor :\n");
                scanf ("%d", &valor);
                cabeca = InserirInicio(valor, cabeca);
                break;
            case 3:
                LimparPrompt();
                printf ("Insira o valor :\n");
                scanf ("%d", &valor);
                cabeca = InserirFinal(valor, cabeca);

                break;        
            case 4:
                LimparPrompt();
                printf ("Informe a posição :");
                scanf ("%d", &posicao);
                
                printf ("Informe o valor : ");
                scanf ("%d", &valor);
                cabeca = InserirPosicao(posicao, valor, cabeca);
                break;
            case 5:
                LimparPrompt();
                printf ("Informe o valor a ser procurado : ");
                scanf ("%d", &valor);
                printf ("\n");
                ProcurarElemento(valor, cabeca);
                break;
            case 6:
                LimparPrompt();
                printf ("Informe o valor a ser removido : ");
                scanf ("%d", &valor);
                cabeca = RemoverValor(valor, cabeca);
                break;            
            default:

                break;    
        }
    }

}
void MostrarLista(node *cabeca){
    if (!cabeca){
        printf ("Lista Vazia \n");
    }
    node *aux = cabeca;
    printf ("Elementos da lista :\n");
    do {
        printf ("%i ", aux->vlr);
        aux = aux->prox;
    }while (aux != cabeca);
    printf ("\n");
}

node *InserirInicio(int valor, node *cabeca){
    node *novo = malloc(sizeof(node));
    
    if (!novo){
        printf ("Erro! Memória Insuficiente !!");
    } else {
        novo->vlr = valor;

        if (!cabeca){
            novo->prox = novo;
        } else {
            node *aux = cabeca;
            novo->prox = cabeca;
            do {
                aux = aux->prox;
            }while (aux->prox != cabeca);
            aux->prox = novo;
        }
    }
    return novo;
}    

node *InserirFinal(int valor,node *cabeca){
    node *novo = malloc(sizeof(node));
    if (!novo) {
        printf("Erro! Memória Insuficiente!\n");
        return cabeca; 
    }

    novo->vlr = valor;

    if (!cabeca) { 
        novo->prox = novo; 
        return novo;       
    } else {
        node *aux = cabeca;
        do {
            aux = aux->prox;
        } while (aux->prox != cabeca); 

        aux->prox = novo;
        novo->prox = cabeca; 
        return cabeca; 
    }
}

node *InserirPosicao(int posicao, int valor, node *cabeca) {
    if (posicao < 1) {
        printf("Posição inválida! A posição deve ser maior que 0.\n");
        return cabeca;
    }

    node *novo = malloc(sizeof(node));
    novo->vlr = valor;

    if (!cabeca && posicao == 1) {
        novo->prox = novo;
        return novo;
    }

    if (posicao == 1) {
        novo->prox = cabeca;

        node *aux = cabeca;
        while (aux->prox != cabeca) {
            aux = aux->prox;
        }

        aux->prox = novo;

        return novo;
    }

    node *aux = cabeca;
    int contador = 1;
    while (contador < posicao - 1 && aux->prox != cabeca) {
        aux = aux->prox;
        contador++;
    }

    if (contador != posicao - 1) {
        printf("Posição inválida! A lista tem menos de %d elementos.\n", posicao);
        free(novo);
        return cabeca;
    }

    novo->prox = aux->prox;
    aux->prox = novo;

    return cabeca;
}

void ProcurarElemento(int valor, node *cabeca){
    node *aux = cabeca;
    int cont=1;
    while (aux->prox != cabeca){
        if (aux->vlr == valor){
            printf ("valor %i encontrado na posição %i\n",valor, cont);
        }
        aux = aux->prox;
        cont++;
    }
    if (aux->vlr == valor){
            printf ("valor %i encontrado na posição %i\n",valor, cont);
    }
    printf ("\n");
}

node *RemoverValor(int valor, node *cabeca) {
    if (!cabeca) {
        printf("A lista está vazia!\n");
        return cabeca;
    }

    node *aux = cabeca;
    node *anterior = NULL;

    if (cabeca->vlr == valor) {
        if (cabeca->prox == cabeca) {
            free(cabeca);
            return NULL;
        }

        do {
            aux = aux->prox;
        } while (aux->prox != cabeca);

        aux->prox = cabeca->prox;

        aux = cabeca->prox;
        free(cabeca);
        return aux;
    }

    anterior = cabeca;
    aux = cabeca->prox;
    while (aux != cabeca && aux->vlr != valor) {
        anterior = aux;
        aux = aux->prox;
    }

    if (aux == cabeca) {
        printf("Valor %d não encontrado na lista!\n", valor);
        return cabeca;
    }

    anterior->prox = aux->prox;
    free(aux);

    return cabeca;
}
