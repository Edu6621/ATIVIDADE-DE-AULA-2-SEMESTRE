
/* Resolva o problema utilizando os conceitos trabalhados em aulas, aplicados na linguagem C.
 1. Considerando o programa exemplo desenvolvido em aula, adapte o código para incluir as seguintes
operações para manipulação da lista:

    a. Inserir no final da lista
    b. Buscar por valor
    c. Buscar por posição
    d. Remover do final
    e. Remover por posição
    f. Remover por valor
    g. Imprimir apenas elementos pares (ou ímpares)
    h. Imprimir valores
    i. Finalizar programa
    
Importante: para cada opção selecionada, verifique a possibilidade de sua execução, informando caso
alguma solicitação não possa ser atendida (ex: tentar excluir um elemento de uma lista vazia).
Desafio: implemente uma função recursiva e uma função não recursiva para contar a quantidade de
elementos na lista. */
#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int valor;
    struct Node *pPonteiro;
} node;


node* insereFinal(node *cabeca,int num);
void buscarValor(node *cabeca,int num);
void buscaPosicao(node *cabeca, int num);
node* removeFinal(node *cabeca);
node *removerPosicao(node *cabeca,int num);
node *removerValor (node *cabeca,int num);
void imprimirParImpar(node *cabeca,int num);

void imprimir(node *cabeca);

int main () {
    node *cabeca = NULL;
    char opcao = 'z';
    int num;
    while (opcao != 'i'){
        printf ("\tMENU\n");
        printf ("a. Inserir no final da lista\n");
        printf ("b. Buscar por valor\n");
        printf ("c. Buscar por posição\n");
        printf ("d. Remover do final\n");
        printf ("e. Remover por posição\n");
        printf ("f. Remover por valor\n");
        printf ("g. Imprimir apenas elementos pares (ou ímpares)\n");
        printf ("h. Imprimir elementos\n");
        printf ("i. Finalizar programa\n");
        
        scanf (" %c", &opcao);

        switch (opcao){
            case 'a':
                printf ("Informe o valor : ");
                scanf ("%i", &num);
                cabeca = insereFinal(cabeca, num);  //pronto
                break;
            case 'b':
                printf ("Informe o valor : ");
                scanf ("%d", &num);
                buscarValor(cabeca, num); //pronto
                break;
            case 'c':
                printf ("Informe a posição : ");
                scanf ("%d", &num);
                buscaPosicao(cabeca, num); //pronto
                break;
            case 'd':
                cabeca = removeFinal(cabeca); //pronto
                break;
            case 'e':
                printf ("Informe a posição : ");
                scanf ("%d", &num);
                cabeca = removerPosicao(cabeca, num);
                break;
            case 'f':
                printf ("Informe o valor : ");
                scanf ("%d", &num);
                cabeca = removerValor (cabeca, num);
                break;
            case 'g':
                printf ("Escolha :\n");
                printf ("Par - 1\n");
                printf ("Impar - 2\n");
                scanf (" %d", &num);
                if (num == 1 || num == 2){
                    imprimirParImpar(cabeca, num);
                }
                break;
            case 'h':
                imprimir(cabeca); //pronto
                break;    
            case 'i':
                printf ("Programa Finalizado !\n"); //pronto
                return 0;
            default :
                printf ("Caractere inválido !"); //pronto
                break;
        }
        getchar();
    }
}    
node* insereFinal(node *cabeca,int num){
    node *novo =(node*) malloc(sizeof(node));
    novo->valor = num;
    novo->pPonteiro = NULL;
    
    if (cabeca == NULL){
        return novo;
    }

    node *aux = cabeca;
    while (aux->pPonteiro != NULL) {
        aux = aux->pPonteiro;
    }

    aux->pPonteiro = novo;
    return cabeca;

}

void buscarValor(node *cabeca,int num){
    node *aux = cabeca;
    int i=0;

    while (aux->pPonteiro != NULL){
        i++;
        if (aux->valor == num){
            printf ("\nVocê encontrou o valor %i na posição %i\n\n", num, i);
        }
        aux = aux->pPonteiro;
    }
    printf ("\nNão existe esse valor na lista\n\n");
}

void buscaPosicao(node *cabeca, int num){
    node *aux = cabeca;
    for (int i=0; i<num-1; i++){
        aux = aux->pPonteiro;
    }
    if (aux != NULL){
        printf ("\no valor na posicao %i é %i\n\n", num, aux->valor);
    }else{
        printf ("Não existe valor na posição %i\n", num);
    }
}

node* removeFinal(node *cabeca) {
    if (cabeca == NULL) {
        printf("Lista vazia.\n");
        return cabeca;
    }

    if (cabeca->pPonteiro == NULL) {
        free(cabeca);
        printf("Elemento removido.\n");
        return NULL;
    }

    node *aux = cabeca;
    node *penultimo = NULL;

    while (aux->pPonteiro != NULL) {
        penultimo = aux;
        aux = aux->pPonteiro;
    }

    penultimo->pPonteiro = NULL; 
    free(aux);

    return cabeca;  
}

node *removerPosicao(node *cabeca,int num){
    if (cabeca == NULL){
        printf ("\nLista Vazia !\n\n");
        return cabeca;
    }
    
    if (cabeca->valor == num) {
        node* temp = cabeca;
        cabeca = cabeca->pPonteiro; 
        free(temp);
        return cabeca;
    }
    
    
    node *aux = cabeca;
    node *penultimo = aux;
    for (int i=1; i<num; i++){
        aux = aux->pPonteiro;
    }
    for (int i=1; i<num-1; i++){
        penultimo = penultimo->pPonteiro;
    }
    penultimo->pPonteiro = aux->pPonteiro;
    free (aux);
    return cabeca;
}

node *removerValor (node *cabeca,int num){
    if (cabeca == NULL){
        printf ("\nLista Vazia !\n\n");
        return cabeca;
    }
    
    if (cabeca->valor == num) {
        node* temp = cabeca;
        cabeca = cabeca->pPonteiro; 
        free(temp);
        printf("\nElemento removido.\n");
        return cabeca;
    }
    
    
    node *aux = cabeca;
    node *penultimo = aux;
    
    while (aux->valor != num && aux != NULL){
        aux = aux->pPonteiro;
    }
    while (penultimo->pPonteiro != aux){
        penultimo = penultimo -> pPonteiro;
    }
    
    if (aux->valor == num){
        penultimo->pPonteiro = aux->pPonteiro;
        free (aux);
    }else{
        printf ("\nNão existe esse número na lista \n\n");
    }
    return cabeca;
}

void imprimirParImpar(node *cabeca,int num){
    node *aux = cabeca;
    printf ("\n");
    while (aux != NULL){
        if (num == 1){
            if (aux->valor %2 == 0){
                printf ("%d ", aux->valor);
            }
            aux = aux->pPonteiro;
        }
        
        
        else{
            if (aux->valor %2 != 0){
                printf ("%d ", aux->valor);
            }
            aux = aux->pPonteiro;
        }
    }
    printf ("\n");
}

void imprimir(node *cabeca){
    if (cabeca == NULL) {
        printf("Lista vazia.\n");
        return;
    }

    node *temp = cabeca;
    while (temp != NULL) {
        printf("%d ", temp->valor);
        temp = temp->pPonteiro;
    }
    printf("\n");
}
